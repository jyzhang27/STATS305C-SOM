all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data.csv')
head(all_transfer_data)
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019]
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019]
head(transfers_in_data)
transfers_in_data$year
transfers_in_data$year[1]
transfers_in_data$year[1]==2013
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
set.seed(1234)
som_grid <- somgrid(xdim=20, ydim=30, topo='hexagonal', neighbourhood.fct = 'gaussian', toroidal = F)
library(kohonen)
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data.csv')
head(all_transfer_data)
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
set.seed(1234)
som_grid <- somgrid(xdim=20, ydim=30, topo='hexagonal', neighbourhood.fct = 'gaussian', toroidal = F)
som_model <- som(transfers_in_2019_data, grid=som_grid)
som_model <- som(data.matrix(transfers_in_2019_data), grid=som_grid)
# training progress to see convergence
plot(som_model, type='changes')
# see how many samples are in each node, aim for 5-10
plot(som_model, type='count', main='Samples per Node')
# U matrix for distance and then clustering!
plot(som_model, type='dist.neighbours', main='SOM neighbor distances')
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=5)
# plot the codebook vectors
plot(som_model, type='codes', zlim=c('red', 'green', 'blue'))
som_codebook <- som_model$codes[[1]]
som_codebook_colors <- rgb(som_codebook[,1],som_codebook[,2],som_codebook[,3],maxColorValue=255 )
cols <- c('red', 'blue', 'green', 'yellow', 'black')
plot(som_model, type='mapping', keepMargins = F, col=NA,
bg= cols[som_hc], add.cluster.boundaries(som_model, som_hc))
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=9)
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=5)
# mapping nodes back
transfers_in_2019_data <-cbind(transfers_in_2019_data, som_hc[som_model$unit.classif])
colnames(rgb)[12] <- 'cluster'
library(kohonen)
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data.csv')
head(all_transfer_data)
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
set.seed(1234)
som_grid <- somgrid(xdim=20, ydim=30, topo='hexagonal', neighbourhood.fct = 'gaussian', toroidal = F)
som_model <- som(data.matrix(transfers_in_2019_data), grid=som_grid)
# training progress to see convergence
plot(som_model, type='changes')
# see how many samples are in each node, aim for 5-10
plot(som_model, type='count', main='Samples per Node')
# U matrix for distance and then clustering!
plot(som_model, type='dist.neighbours', main='SOM neighbor distances')
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=5)
# add.cluster.boundaries(som_model, som_hc)
# plot the codebook vectors
plot(som_model, type='codes', zlim=c('red', 'green', 'blue'))
som_codebook <- som_model$codes[[1]]
cols <- c('red', 'blue', 'green', 'yellow', 'black')
plot(som_model, type='mapping', keepMargins = F, col=NA,
bg= cols[som_hc], add.cluster.boundaries(som_model, som_hc))
# mapping nodes back
transfers_in_2019_data <-cbind(transfers_in_2019_data, som_hc[som_model$unit.classif])
colnames(rgb)[12] <- 'cluster'
n
# mapping nodes back
transfers_in_2019_data <-cbind(transfers_in_2019_data, som_hc[som_model$unit.classif])
colnames(transfers_in_2019_data )[12] <- 'cluster'
library(kohonen)
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data.csv')
head(all_transfer_data)
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
set.seed(1234)
som_grid <- somgrid(xdim=20, ydim=30, topo='hexagonal', neighbourhood.fct = 'gaussian', toroidal = F)
som_model <- som(data.matrix(transfers_in_2019_data), grid=som_grid)
# training progress to see convergence
plot(som_model, type='changes')
# see how many samples are in each node, aim for 5-10
plot(som_model, type='count', main='Samples per Node')
# U matrix for distance and then clustering!
plot(som_model, type='dist.neighbours', main='SOM neighbor distances')
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=5)
# add.cluster.boundaries(som_model, som_hc)
# plot the codebook vectors
plot(som_model, type='codes', zlim=c('red', 'green', 'blue'))
som_codebook <- som_model$codes[[1]]
cols <- c('red', 'blue', 'green', 'yellow', 'black')
plot(som_model, type='mapping', keepMargins = F, col=NA,
bg= cols[som_hc], add.cluster.boundaries(som_model, som_hc))
# mapping nodes back
transfers_in_2019_data <-cbind(transfers_in_2019_data, som_hc[som_model$unit.classif])
colnames(transfers_in_2019_data )[12] <- 'cluster'
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data_no_nan.csv')
head(all_transfer_data)
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
set.seed(1234)
som_grid <- somgrid(xdim=20, ydim=30, topo='hexagonal', neighbourhood.fct = 'gaussian', toroidal = F)
som_model <- som(data.matrix(transfers_in_2019_data), grid=som_grid)
# training progress to see convergence
plot(som_model, type='changes')
# see how many samples are in each node, aim for 5-10
plot(som_model, type='count', main='Samples per Node')
# U matrix for distance and then clustering!
plot(som_model, type='dist.neighbours', main='SOM neighbor distances')
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=5)
# plot the codebook vectors
plot(som_model, type='codes', zlim=c('red', 'green', 'blue'))
som_codebook <- som_model$codes[[1]]
cols <- c('red', 'blue', 'green', 'yellow', 'black')
plot(som_model, type='mapping', keepMargins = F, col=NA,
bg= cols[som_hc], add.cluster.boundaries(som_model, som_hc))
# mapping nodes back
transfers_in_2019_data <-cbind(transfers_in_2019_data, som_hc[som_model$unit.classif])
colnames(transfers_in_2019_data )[12] <- 'cluster'
all_transfer_data <- all_transfer_data[, -'season']
all_transfer_data <- all_transfer_data[, -c('season')]
all_transfer_data <- subset(all_transfer_data,select=c(season))
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data_no_nan.csv')
head(all_transfer_data)
all_transfer_data <- subset(all_transfer_data,select=-c(season))
all_transfer_data <- all_transfer_data[all_transfer_data$league_name !='Championship', ]
transfers_in_data<- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
all_transfer_data$position
unique(all_transfer_data$position)
all_transfer_data[all_transfer_data$position == 'midfield', ] <- 'Midfielder'
unique(all_transfer_data$position)
head(all_transfer_data)
all_transfer_data$fee
unique(all_transfer_data$transfer_movement)
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data_no_nan.csv')
head(all_transfer_data)
all_transfer_data <- subset(all_transfer_data,select=-c(season))
all_transfer_data <- all_transfer_data[all_transfer_data$league_name !='Championship', ]
all_transfer_data[all_transfer_data == 'midfield', ] <- 'Midfielder'
all_transfer_data[all_transfer_data == 'midfield'] <- 'Midfielder'
all_transfer_data=='midfield'
sum(all_transfer_data=='midfield')
transfers_in_data <- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
head(all_transfer_data)
grepl(fee, 'Loan')
grepl(all_transfers_data$fee, 'Loan')
grepl(all_transfer_data$fee, 'Loan')
grepl(all_transfer_data$fee[1], 'Loan')
grepl(all_transfer_data$fee[100], 'Loan')
sapply(all_transfer_data$fee, grepl, x = 'Loan')
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan'), 'yes', 'no')
head(all_transfer_data)
all_transfer_data[, c(6,11)]
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan|loan'), 'yes', 'no')
all_transfer_data[, c(6,11)]
grepl('end of loan11', 'loan')
grep('end of loan11', 'loan')
grepl('end of loan11', 'loan')
grepl('end of loan', 'loan')
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan|loan', fixed=T), 'yes', 'no')
all_transfer_data[, c(6,11)]
grepl('end of loan', 'loan', fixed=T)
grepl('loan', 'loan', fixed=T)
grepl('loan end', 'loan', fixed=T)
grepl('loan end', 'loan ', fixed=T)
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan', fixed=T, ignore.caseT), 'yes', 'no')
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan', fixed=T, ignore.case=T), 'yes', 'no')
warnings()
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan | loan', fixed=T), 'yes', 'no')
all_transfer_data[,c(6,11)]
grepl('end of loan444', 'loan')
grepl('end of loan 444', 'loan')
grepl('loan', 'end of loan 444',)
grepl('loan', 'end of loan 444')
grepl('loan', 'end of loan444')
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan | loan', fixed=T), 'yes', 'no')
all_transfer_data[,c(6,11)]
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = '\\<Loan\\ | \\<loan\\', fixed=T), 'yes', 'no')
all_transfer_data[,c(6,11)]
grep('Loan', 'Loan fee')
grepl('Loan', 'Loan fee')
sapply(all_transfer_data$fee, grepl, x = '\\<Loan\\ | \\<loan\\', fixed=T)
sapply(all_transfer_data$fee, grepl, x = '\\<Loan\\ | \\<loan\\', fixed=T)[1:20]
grepl('Loan | loan', 'Loan fee')
grepl('Loan | loan', all_transfer_data$fee[8])
all_transfer_data$fee[8]
grepl('Loan | loan', all_transfer_data$fee[8])
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = 'Loan | loan'), 'yes', 'no')
all_transfer_data$fee[8]
all_transfer_data[,c(6,11)]
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = ' Loan | loan'), 'yes', 'no')
all_transfer_data[,c(6,11)][1:20]
all_transfer_data[1:20,c(6,11)]
all_transfer_data$transfer_loan <- ifelse(sapply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T), 'yes', 'no')
all_transfer_data[1:20,c(6,11)]
grepl('Loan', 'Loan fee')
all_transfer_data$transfer_loan <- sapply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T)
all_transfer_data[1:20,c(6,11)]
all_transfer_data$transfer_loan <- lapply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T)
all_transfer_data[1:20,c(6,11)]
all_transfer_data$transfer_loan <- apply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T)
?apply
?sapply
all_transfer_data$transfer_loan <- vapply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T)
all_transfer_data$transfer_loan <- sapply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T)
all_transfer_data[1:20,c(6,11)]
sapply(all_transfer_data$fee, grepl, x = ' Loan | loan', fixed=T)[1:20]
sapply(all_transfer_data$fee, grepl, x = 'loan', fixed=T)[1:20]
sapply(all_transfer_data$fee, grepl, x = 'Loan', fixed=T)[1:20]
grepl('Loan | loan', 'end of loan')
sapply(all_transfer_data$fee, grepl, x = 'Loan|loan', fixed=T)[1:20]
grepl('Loan | loan', 'end of Loan')
grepl('Loan | loan', 'Loan fee')
grepl('Loan | loan', ' Loan fee')
install.packages('stringr')
library(stringr)
str_detect(all_transfer$fee, 'Loan')
str_detect(all_transfer_data$fee, 'Loan')
str_detect(all_transfer_data$fee, 'Loan|loan')
all_transfer_data[1:20,c(6,11)]
all_transfer_data$transfer_loan <- str_detect(all_transfer_data$fee, 'Loan|loan')
all_transfer_data[1:20,c(6,11)]
all_transfer_data[,c(6,11)]
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data_no_nan.csv')
head(all_transfer_data)
all_transfer_data <- all_transfer_data[all_transfer_data$league_name !='Championship', ]
all_transfer_data[all_transfer_data == 'midfield'] <- 'Midfielder'
all_transfer_data$transfer_loan <- str_detect(all_transfer_data$fee, 'Loan|loan')
all_transfer_data <- subset(all_transfer_data,select=-c(season, fee))
head(all_transfer_data)
transfers_out_data <- all_transfer_data[all_transfer_data$transfer_movement=='out', ]
32700+28483
library(stringr)
all_transfer_data <- read.csv('~/Documents/STATS305C-SOM/data/all_transfer_data_no_nan.csv')
head(all_transfer_data)
all_transfer_data <- all_transfer_data[all_transfer_data$league_name !='Championship', ]
all_transfer_data[all_transfer_data == 'midfield'] <- 'Midfielder'
all_transfer_data$transfer_loan <- str_detect(all_transfer_data$fee, 'Loan|loan')
all_transfer_data <- subset(all_transfer_data,select=-c(season, fee))
transfers_in_data <- all_transfer_data[all_transfer_data$transfer_movement=='in', ]
transfers_out_data <- all_transfer_data[all_transfer_data$transfer_movement=='out', ]
write.csv(all_transfer_data, file='all_transfer_data_cleaned.csv')
write.csv(transfers_in_data, file='transfers_in.csv')
write.csv(transfers_out_data, file='transfers_out.csv')
library(kohonen)
transfers_in_2019_data <- transfers_in_data[transfers_in_data$year == 2019, ]
set.seed(1234)
som_grid <- somgrid(xdim=20, ydim=30, topo='hexagonal', neighbourhood.fct = 'gaussian', toroidal = F)
som_model <- som(data.matrix(transfers_in_2019_data), grid=som_grid)
# training progress to see convergence
plot(som_model, type='changes')
# see how many samples are in each node, aim for 5-10
plot(som_model, type='count', main='Samples per Node')
# U matrix for distance and then clustering!
plot(som_model, type='dist.neighbours', main='SOM neighbor distances')
som_hc <- cutree(hclust(object.distances(som_model, 'codes')), k=5)
# add.cluster.boundaries(som_model, som_hc)
# plot the codebook vectors
plot(som_model, type='codes', zlim=c('red', 'green', 'blue'))
som_codebook <- som_model$codes[[1]]
cols <- c('red', 'blue', 'green', 'yellow', 'black')
plot(som_model, type='mapping', keepMargins = F, col=NA,
bg= cols[som_hc], add.cluster.boundaries(som_model, som_hc))
# mapping nodes back
transfers_in_2019_data <-cbind(transfers_in_2019_data, som_hc[som_model$unit.classif])
colnames(transfers_in_2019_data )[12] <- 'cluster'
colnames(transfers_in_2019_data )[11] <- 'cluster'
